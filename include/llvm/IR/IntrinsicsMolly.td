

def int_molly_ptr : Intrinsic<[llvm_anyptr_ty], [llvm_anyptr_ty/*ptr to field*/, llvm_vararg_ty/*coordinates*/], [IntrNoMem/*Access itself done by explicit LoadInst/StoreInst*/]>;

// We do this in buffers because of trouble if the value is a StructType
def int_molly_get : Intrinsic<[], [llvm_anyptr_ty/*ptr to field*/, llvm_anyptr_ty/*target buffer*/, llvm_vararg_ty/*coordinates*/], [IntrReadWriteArgMem]>;
def int_molly_set : Intrinsic<[], [llvm_anyptr_ty/*ptr to field*/, llvm_anyptr_ty/*source buffer*/, llvm_vararg_ty/*coordinates*/], []>;

def int_molly_islocal : Intrinsic<[llvm_i1_ty], [llvm_anyptr_ty/*ptr to field*/, llvm_vararg_ty/*coordinates*/], [IntrNoMem]>;
def int_molly_rankof : Intrinsic<[llvm_i64_ty], [llvm_anyptr_ty/*ptr to field*/, llvm_vararg_ty/*coordinates*/], [IntrNoMem]>;

def int_molly_locallength : Intrinsic<[llvm_i64_ty], [llvm_anyptr_ty/*ptr to field*/, llvm_i64_ty/*dimension*/], [IntrNoMem]>;
def int_molly_localoffset : Intrinsic<[llvm_i64_ty], [llvm_anyptr_ty/*ptr to field*/, llvm_i64_ty/*dimension*/], [IntrNoMem]>;

def int_molly_1d_ptr : Intrinsic<[llvm_ptr_ty], [llvm_ptr_ty/*ptr to field*/, llvm_i64_ty/*logical length of dim 0*/, llvm_i64_ty/*coord dim0*/], [IntrNoMem/*Access itself done by explicit LoadInst/StoreInst*/]>;
def int_molly_1d_islocal : Intrinsic<[llvm_i1_ty], [llvm_ptr_ty/*ptr to field*/, llvm_i64_ty/*logical length of dim 0*/, llvm_i64_ty/*coord dim0*/], [IntrNoMem]>;
def int_molly_1d_rankof : Intrinsic<[llvm_i64_ty], [llvm_ptr_ty/*ptr to field*/, llvm_i64_ty/*logical length of dim 0*/, llvm_i64_ty/*coord dim0*/], [IntrNoMem]>;

def int_molly_get_local : Intrinsic<[], [llvm_anyptr_ty/*ptr to field*/, llvm_anyptr_ty/*target buffer*/, llvm_vararg_ty/*coordinates*/], [IntrReadWriteArgMem]>;
def int_molly_set_local : Intrinsic<[], [llvm_anyptr_ty/*ptr to field*/, llvm_anyptr_ty/*source buffer*/, llvm_vararg_ty/*coordinates*/], []>;
def int_molly_ptr_local : Intrinsic<[llvm_anyptr_ty], [llvm_anyptr_ty/*ptr to field*/, llvm_vararg_ty/*coordinates*/], [IntrNoMem/*access itself done by following load/store*/]>;

//def int_molly_combuf_send : Intrinsic<[], [llvm_anyptr_ty/*ptr to combuf*/]>;
//def int_molly_combuf_send_wait : Intrinsic<[], [llvm_ptr_ty/*ptr to combuf*/]>;
//def int_molly_combuf_recv: Intrinsic<[], [llvm_anyptr_ty/*ptr to combuf*/]>;
//def int_molly_combuf_recv_wait: Intrinsic<[], [llvm_ptr_ty/*ptr to combuf*/]>;

// Get a pointer to the first element into a buffer that sends to dst
//def int_molly_combuf_sendbuf_ptr : Intrinsic<[llvm_anyptr_ty/*ptr to buf elts*/], [llvm_anyptr_ty/*ptr to combuf*/, llvm_i64_ty/*rank of dst*/]>;
// Get a pointer to the first element into the buffer that receives from src
//def int_molly_combuf_recvbuf_ptr : Intrinsic<[llvm_anyptr_ty/*ptr to buf elts*/], [llvm_anyptr_ty/*ptr to combuf*/, llvm_i64_ty/*rank of src*/]>;

def int_molly_cluster_dimensions : Intrinsic<[llvm_i64_ty/*number of dimensions*/]>;
def int_molly_cluster_current_coordinate : Intrinsic<[llvm_i64_ty/*coordinate*/], [llvm_i64_ty/*dimension*/]>;

//def int_molly : Intrinsic<[], [], []>;

// Put initialization code here
def int_molly_global_init : Intrinsic<[], []>;

// Put deallocation code here
def int_molly_global_free : Intrinsic<[], []>;




//===----------------------------------------------------------------------===//
// Outer interface
//   Calls to these intrinsics to be generated by the frontend
//   Molly will convert them to something else
//===----------------------------------------------------------------------===//


// Call the original main function from the application
def int_molly_orig_main : Intrinsic<[llvm_i32_ty], [llvm_i32_ty/*argc*/, llvm_anyptr_ty/*argv*/]>;


// Pass info about a field to Molly
// Molly will use the metadata to transform the int_molly_field_... calls and replace this call with initialization code
def int_molly_field_init : Intrinsic<[], [llvm_anyptr_ty/*ptr to field*/, llvm_metadata_ty]>;

// Put deallocation code here
def int_molly_field_free : Intrinsic<[], [llvm_anyptr_ty/*ptr to field*/]>;

// Accessing a field managed by Molly
// follow by a LoadInst or StoreInst to read/write the element
// Except adding an offset to access a struct element, not other operation is allowed on the returned pointer
def int_molly_field_ptr : Intrinsic<[llvm_anyptr_ty], [llvm_anyptr_ty/*ptr to field*/, llvm_vararg_ty/*coordinates*/], [IntrNoMem/*Access itself done by explicit LoadInst/StoreInst*/]>;

// Return whether a specific coordinate has the home location on this node
def int_molly_field_islocal : Intrinsic<[llvm_i1_ty], [llvm_anyptr_ty/*ptr to field*/, llvm_vararg_ty/*coordinates*/]>;

// Return the the home rank where the given coordinate is local
def int_molly_field_rankof : Intrinsic<[llvm_i64_ty], [llvm_anyptr_ty/*ptr to field*/, llvm_vararg_ty/*coordinates*/]>;


// If the coordinate's home location is this node, then return the local index to that element
def int_molly_local_indexof : Intrinsic<[llvm_i64_ty], [llvm_anyptr_ty/*ptr to field*/, llvm_vararg_ty/*coordinates*/]>;


// Number of cluster dimensions we compiled for
def int_molly_cluster_dims : Intrinsic<[llvm_i64_ty], []>;

// Get the number of nodes in one dimension of the cluster
def int_molly_cluster_length : Intrinsic<[llvm_i64_ty], [llvm_i64_ty/*dimension*/]>;

// Return the rank where this intrnsics is executed
def int_molly_cluster_myrank : Intrinsic<[llvm_i64_ty/*coordinate*/], []>;


//===----------------------------------------------------------------------===//
// Inner interface 
//   Calls generated by Molly that will be converted to runtime library calls 
//   in Molly's postprocessing
//===----------------------------------------------------------------------===//

// Return the coordinate of the node we are executing
// mollyrt signature: uint64_t __molly_cluster_pos(uint64_t dimension)
def int_molly_cluster_pos : Intrinsic<[llvm_i64_ty/*coordinate*/], [llvm_i64_ty/*dimension*/]>;

// Get the global rank of the node at the given coordinates
// mollyrt signature: uint64_t __molly_cluster_rankof(int coords[])
// Maybe we can Molly let do this for efficiency reasons
def int_molly_cluster_rankof : Intrinsic<[llvm_i64_ty/*coordinate*/], [llvm_vararg_ty/*coordinates*/]>;

// Initialize the local part of a field
// mollyrt signature: void __molly_local_init(void *localbuf, uint64_t count)
def int_molly_local_init : Intrinsic<[], [llvm_anyptr_ty/*ptr to field*/, llvm_i64_ty/*number of local elts*/, llvm_anyptr_ty/*rankoffunc*/, llvm_anyptr_ty/*localindexfunc*/]>;

// Free the local part of a field
// mollyrt signature: void __molly_local_free(void *localbuf)
def int_molly_local_free : Intrinsic<[], [llvm_anyptr_ty/*ptr to field*/]>;

// Get the pointer to the first element in the local buffer
// mollyrt_signature: void *__molly_local_ptr(void *localbuf)
def int_molly_local_ptr : Intrinsic<[llvm_anyptr_ty], [llvm_anyptr_ty/*ptr to field*/]>;

// Send a single element
// Just to be used if outside SCoP
// mollyrt signature: void __molly_local_send(void *localbuf, uint64_t eltIdx, uint64_t dstNode, uint64_t uniqId)
//def int_molly_local_send : Intrinsic<[], [llvm_anyptr_ty/*ptr to local*/, llvm_i64_ty/*local idx of value to send*/, llvm_i64_ty/*target rank*/, llvm_i64_ty]>;

// Recv a single element
// mollyrt signature: void __molly_recv(void *localbuf, uint64_t eltIdx, uint64_t dstNode, uint64_t uniqId)
//def int_molly_local_recv : Intrinsic<[], [llvm_anyptr_ty/*ptr to local*/, llvm_i64_ty/*local idx of value to send*/, llvm_i64_ty/*source rank*/, llvm_i64_ty]>;


// Allocate and initialize a combuf that sends to another node
// NOTE: Instead of eltSize would have preferred a link to the field/localbuf, logically a combuf is associated to a SCoP, not a field
// mollyrt signature: void *__molly_combuf_send_alloc(uint64_t dstCount, uint64_t eltSize)
def int_molly_combuf_send_alloc : Intrinsic<[llvm_ptr_ty], [llvm_i64_ty/*number of targets*/, llvm_i64_ty/*byte size per elt*/]>;

// Init the buffer size of one target
// mollyrt signature: void __molly_combuf_send_dst_init(void *sendbuf, uint64_t dst, uint64_t count)
def int_molly_combuf_send_dst_init : Intrinsic<[], [llvm_anyptr_ty/*ptr to combuf*/, llvm_i64_ty/*rank of target to init*/, llvm_i64_ty/*number of elts*/]>;

// Free the buffer for all targets
// mollyrt signature: void __molly_combuf_send_free(void *sendbuf)
def int_molly_combuf_send_free : Intrinsic<[], [llvm_anyptr_ty/*ptr to combuf*/]>;

// Get a pointer to a specific element in the send buffer
// mollyrt signature: void *__molly_combuf_send_ptr(void *sendbuf, uint64_t dst)
def int_molly_combuf_send_ptr : Intrinsic<[llvm_anyptr_ty], [llvm_anyptr_ty/*ptr to combuf*/, llvm_i64_ty/*target rank*/]>;

// Wait for previous transfers to finish so we can write into the buffer
// mollyrt signature: void __molly_combuf_send_wait(void *sendbuf, uint64_t dstNode)
def int_molly_combuf_send_wait : Intrinsic<[], [llvm_anyptr_ty/*ptr to combuf*/, llvm_i64_ty/*target rank*/]>;

// Writing to buffer has been finished so it can transported to the other side
// mollyrt signature: void __molly_combuf_send(void *sendbuf, uint64_t dstNode)
def int_molly_combuf_send : Intrinsic<[], [llvm_anyptr_ty/*ptr to combuf*/, llvm_i64_ty/*target rank*/]>;


// Allocate memory for data to be received. It is initialized in "ready to recv data"-state, as after a call to int_molly_combuf_recv
// mollyrt signature: void *__molly_combuf_recv_alloc(uint64_t srcCount, size_t eltSize)
def int_molly_combuf_recv_alloc : Intrinsic<[llvm_ptr_ty], [llvm_i64_ty/*number of elts*/, llvm_i64_ty/*byte size per elt*/]>;

// Alloc the buffer for data from a particular source node
// mollyrt signature: void __molly_combuf_recv_src_init(void *recvbuf, uint64_t src)
def int_molly_combuf_recv_src_init : Intrinsic<[], [llvm_anyptr_ty/*ptr to combuf*/, llvm_i64_ty/*rank of source to init*/, llvm_i64_ty/*number of elts*/]>;

// Free the buffer
// mollyrt signature: void __molly_combuf_recv_free(void *recvbuf)
def int_molly_combuf_recv_free : Intrinsic<[], [llvm_anyptr_ty/*ptr to combuf*/]>;

// Get a pointer to a specific element in the recv buffer
// mollyrt signature: void __molly_combuf_send_ptr(void *recvbuf, uint64_t src)
def int_molly_combuf_recv_ptr : Intrinsic<[llvm_anyptr_ty], [llvm_anyptr_ty/*ptr to combuf*/, llvm_i64_ty/*source rank*/]>;

// Wait for the data to be received completely so we can read from the buffer
// mollyrt signature: void *__molly_combuf_recv_wait(void *recvbuf, uint64_t srcRank)
def int_molly_combuf_recv_wait : Intrinsic<[llvm_anyptr_ty/*ptr to recvd data*/], [llvm_anyptr_ty/*ptr to combuf*/, llvm_i64_ty/*source rank*/]>;

// Buffer has been read completely, can be overwritten again by the next transfer
// mollyrt signature: void __molly_combuf_recv(void *recvbuf, uint64_t)
def int_molly_combuf_recv : Intrinsic<[], [llvm_anyptr_ty/*ptr to combuf*/, llvm_i64_ty/*source rank*/]>;



// Load the value from the home location
// Just to be used if outside SCoP
// mollyrt signature: void __molly_value_load(void *buf, void *val, uint64_t rank, uint64_t idx)
def int_molly_value_load : Intrinsic<[], [llvm_anyptr_ty/*ptr to field*/, llvm_anyptr_ty/*target ptr to value*/, llvm_i64_ty/*rank that stores te value*/, llvm_i64_ty/*local idx on that rank*/]>;

// Store the value to its home location
// mollyrt signature: void __molly_value_store(void *buf, void *val, uint64_t rank, uint64_t idx)
def int_molly_value_store : Intrinsic<[], [llvm_anyptr_ty/*ptr to field*/, llvm_anyptr_ty/*ptr to value to store*/, llvm_i64_ty/*rank that stores te value*/, llvm_i64_ty/*local idx on that rank*/]>;

